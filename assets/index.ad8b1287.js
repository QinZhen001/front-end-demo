import{j as u}from"./index.d257e875.js";let C=0;function m(){return++C}function T(n,t,c,o){return new Promise(e=>{setTimeout(()=>{e(0)},3e3)})}async function _(n,t,c,o,e){console.log("Libuv: uv_tcp_connect",n,t,c,o,e),t.fd=m(),n.handle=t,n.cb=e;const p=await T(t.fd);n.cb(n,p)}class f{constructor(t){this.uv_connect_t={},console.log("C++: ConnectWrap constructor",t),t[0]=this,this.object=t}Dispatch(t,...c){this.uv_connect_t.data=this,t(this.uv_connect_t,...c)}MakeCallback(t,...c){this.object[t](...c)}}class l{constructor(){this.uv_tcp_t={},this.uv_tcp_t.data=this}static Connect(t,c,o){const e=this[0];new f(t).Dispatch(_,e.uv_tcp_t,c,o,(s,r)=>{console.log("C++: connect callback",s,r);const i=s.data,h=s.handle.data;i.MakeCallback("oncomplete",h,i,r)})}}function d(n){const t={};function c(){Object.assign(this,t),n&&n(this)}return{PrototypeTemplate(){return{set(o,e){c.prototype[o]=e}}},InstanceTemplate(){return{set(o,e){t[o]=e}}},GetFunction(){return c}}}const a=d(n=>{n[0]=new l});a.PrototypeTemplate().set("connect",l.Connect);a.InstanceTemplate().set("name","hi");const v=a.GetFunction(),W=d(),k=W.GetFunction(),P=()=>{const n=new v,t=new k;console.log("tcp",n),console.log("req",t);const c="127.0.0.1",o=80;t.oncomplete=()=>{console.log("js: tcp connect success")},t.address=c,t.port=o,n.connect(t,c,o)},g=()=>u("div",{children:u("button",{onClick:()=>{P()},children:"testJsTcpOperate"})});export{g as default};
